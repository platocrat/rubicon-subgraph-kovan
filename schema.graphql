# -------------------------------------------------
# Entities created from RubiconMarket contract.
# -------------------------------------------------
"""
UserTrade model, a custom model to represent an individual user's trade state.
"""
type UserTrade @entity {
  id: ID!
  isLimit: Boolean!
	maker: Bytes!
	taker: Bytes!
  payGem: Bytes!
  buyGem: Bytes!
  payAmount: BigInt!
  buyAmount: BigInt!
  completed: Boolean!
  killed: Boolean!
  timestamp: BigInt!
  transactionHash: Bytes!
}


type FeeTake @entity {
  id: ID!
  pair: Bytes!
  asset: Bytes!
  taker: Bytes!
  feeTo: Bytes!
  feeAmt: BigInt!
  timestamp: BigInt!
}

type LogBump @entity {
  id: ID!
  pair: Bytes!
  maker: Bytes!
  pay_gem: Bytes!
  buy_gem: Bytes!
  pay_amt: BigInt!
  buy_amt: BigInt!
  timestamp: BigInt!
}


type LogBuyEnabled @entity {
  id: ID!
  isEnabled: Boolean!
}

type LogDelete @entity {
  "ID of this entity"
  id: ID!
  keeper: Bytes!
  "ID given to this event by the contract"
  logDeleteID: String! 
}

type LogInsert @entity {
  "ID of this entity"
  id: ID!
  keeper: Bytes!
  "ID given to this event by the contract"
  logInsertID: String! 
}

type LogInt @entity {
  id: ID!
  lol: String!
  input: BigInt! 
}

type LogItemUpdate @entity {
  "ID of this entity"
  id: ID!
  "ID given to this event by the contract"
  logItemUpdateID: String!
}

type LogKill @entity {
  id: ID!
  pair: Bytes!
  maker: Bytes!
  pay_gem: Bytes!
  buy_gem: Bytes!
  pay_amt: BigInt!
  buy_amt: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type LogMake @entity {
  id: ID!
  pair: Bytes!
  maker: Bytes!
  pay_gem: Bytes!
  buy_gem: Bytes!
  pay_amt: BigInt!
  buy_amt: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type LogMatch @entity {
  "ID of this entity"
  id: ID!
  "ID given to this event by the contract"
  logMatchID: String!
  amount: BigInt!
}

type LogMatchingEnabled @entity {
  id: ID!
  isEnabled: Boolean!
}

type LogMinSell @entity {
  "ID of this entity"
  id: ID!
  pay_gem: Bytes!
  min_amount: BigInt!
}

type LogNote @entity {
  "ID of this entity"
  id: ID!
  sig: Bytes!
  guy: Bytes!
  foo: Bytes!
  bar: Bytes!
  wad: BigInt!
  fax: Bytes!
}

type LogSetAuthority @entity {
  "ID of this entity"
  id: ID!
  authority: Bytes!
}

type LogSetOwner @entity {
  id: ID!
  owner: Bytes
}

type LogSortedOffer @entity {
  "ID of this entity"
  id: ID!
  "ID given to this event by the contract"
  logSortedOfferID: String!
}

type LogTake @entity {
  id: ID!
  pair: Bytes!
  maker: Bytes!
  taker: Bytes!
  pay_gem: Bytes!
  buy_gem: Bytes!
  take_amt: BigInt!
  give_amt: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type LogTrade @entity {
  id: ID!
  "Seller's amount to make this trade"
  pay_amt: BigInt!
  "Address of the seller" 
  pay_gem: Bytes! 
  "Buyer's amount to take this trade"
  buy_amt: BigInt!
  "Address of the buyer"
  buy_gem: Bytes! 
}

type LogUnsortedOffer @entity {
  "ID of this entity"
  id: ID!
  "ID given to this event by the contract"
  logUnsortedOfferID: String!
}

type OfferDeleted @entity {
  id: ID!
  "ID given to this event by the contract"
  offerDeletedID: String!
}





"""
RubiconMarket entity is analogous to `LogSetOwner` entity, but is only used to
enable the `rubiconMarket.ts` mapping
"""
type RubiconMarket @entity {
  id: ID!
  owner: Bytes
}


# -------------------------------------------------
# Entities created from BathPair contract.
# -------------------------------------------------

# """
# StrategistTrade stores information about a strategist's trade from the BathPair contract.
# """
# type StrategistTrade @entity {
#   "ID of the ask for this strategist's trade."
#   askId: Int!
#   "Amount of the ask for this strategist's trade."
#   askAmt: BigInt!
#   "ID of the bid for this strategist's trade."
#   bidId: Int!
#   "Amount of the bid for this strategist's trade."
#   bidAmt: BigInt!
#   "Timestamp for this strategist's trade."
#   timestamp: BigInt!
#   "Address of the strategist."
#   strategist: Bytes!
# }
