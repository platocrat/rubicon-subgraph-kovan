// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeeTake extends ethereum.Event {
  get params(): FeeTake__Params {
    return new FeeTake__Params(this);
  }
}

export class FeeTake__Params {
  _event: FeeTake;

  constructor(event: FeeTake) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get asset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get feeTo(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get feeAmt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LogBump extends ethereum.Event {
  get params(): LogBump__Params {
    return new LogBump__Params(this);
  }
}

export class LogBump__Params {
  _event: LogBump;

  constructor(event: LogBump) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pay_gem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buy_gem(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get pay_amt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get buy_amt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LogBuyEnabled extends ethereum.Event {
  get params(): LogBuyEnabled__Params {
    return new LogBuyEnabled__Params(this);
  }
}

export class LogBuyEnabled__Params {
  _event: LogBuyEnabled;

  constructor(event: LogBuyEnabled) {
    this._event = event;
  }

  get isEnabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LogDelete extends ethereum.Event {
  get params(): LogDelete__Params {
    return new LogDelete__Params(this);
  }
}

export class LogDelete__Params {
  _event: LogDelete;

  constructor(event: LogDelete) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogInsert extends ethereum.Event {
  get params(): LogInsert__Params {
    return new LogInsert__Params(this);
  }
}

export class LogInsert__Params {
  _event: LogInsert;

  constructor(event: LogInsert) {
    this._event = event;
  }

  get keeper(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogInt extends ethereum.Event {
  get params(): LogInt__Params {
    return new LogInt__Params(this);
  }
}

export class LogInt__Params {
  _event: LogInt;

  constructor(event: LogInt) {
    this._event = event;
  }

  get lol(): string {
    return this._event.parameters[0].value.toString();
  }

  get input(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogItemUpdate extends ethereum.Event {
  get params(): LogItemUpdate__Params {
    return new LogItemUpdate__Params(this);
  }
}

export class LogItemUpdate__Params {
  _event: LogItemUpdate;

  constructor(event: LogItemUpdate) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogKill extends ethereum.Event {
  get params(): LogKill__Params {
    return new LogKill__Params(this);
  }
}

export class LogKill__Params {
  _event: LogKill;

  constructor(event: LogKill) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pay_gem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buy_gem(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get pay_amt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get buy_amt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LogMake extends ethereum.Event {
  get params(): LogMake__Params {
    return new LogMake__Params(this);
  }
}

export class LogMake__Params {
  _event: LogMake;

  constructor(event: LogMake) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pay_gem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buy_gem(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get pay_amt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get buy_amt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class LogMatch extends ethereum.Event {
  get params(): LogMatch__Params {
    return new LogMatch__Params(this);
  }
}

export class LogMatch__Params {
  _event: LogMatch;

  constructor(event: LogMatch) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogMatchingEnabled extends ethereum.Event {
  get params(): LogMatchingEnabled__Params {
    return new LogMatchingEnabled__Params(this);
  }
}

export class LogMatchingEnabled__Params {
  _event: LogMatchingEnabled;

  constructor(event: LogMatchingEnabled) {
    this._event = event;
  }

  get isEnabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class LogMinSell extends ethereum.Event {
  get params(): LogMinSell__Params {
    return new LogMinSell__Params(this);
  }
}

export class LogMinSell__Params {
  _event: LogMinSell;

  constructor(event: LogMinSell) {
    this._event = event;
  }

  get pay_gem(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get min_amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LogNote extends ethereum.Event {
  get params(): LogNote__Params {
    return new LogNote__Params(this);
  }
}

export class LogNote__Params {
  _event: LogNote;

  constructor(event: LogNote) {
    this._event = event;
  }

  get sig(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get guy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get foo(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get bar(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get wad(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fax(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class LogSetAuthority extends ethereum.Event {
  get params(): LogSetAuthority__Params {
    return new LogSetAuthority__Params(this);
  }
}

export class LogSetAuthority__Params {
  _event: LogSetAuthority;

  constructor(event: LogSetAuthority) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetOwner extends ethereum.Event {
  get params(): LogSetOwner__Params {
    return new LogSetOwner__Params(this);
  }
}

export class LogSetOwner__Params {
  _event: LogSetOwner;

  constructor(event: LogSetOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSortedOffer extends ethereum.Event {
  get params(): LogSortedOffer__Params {
    return new LogSortedOffer__Params(this);
  }
}

export class LogSortedOffer__Params {
  _event: LogSortedOffer;

  constructor(event: LogSortedOffer) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LogTake extends ethereum.Event {
  get params(): LogTake__Params {
    return new LogTake__Params(this);
  }
}

export class LogTake__Params {
  _event: LogTake;

  constructor(event: LogTake) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get pair(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pay_gem(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buy_gem(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get take_amt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get give_amt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class LogTrade extends ethereum.Event {
  get params(): LogTrade__Params {
    return new LogTrade__Params(this);
  }
}

export class LogTrade__Params {
  _event: LogTrade;

  constructor(event: LogTrade) {
    this._event = event;
  }

  get pay_amt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get pay_gem(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buy_amt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get buy_gem(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LogUnsortedOffer extends ethereum.Event {
  get params(): LogUnsortedOffer__Params {
    return new LogUnsortedOffer__Params(this);
  }
}

export class LogUnsortedOffer__Params {
  _event: LogUnsortedOffer;

  constructor(event: LogUnsortedOffer) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OfferDeleted extends ethereum.Event {
  get params(): OfferDeleted__Params {
    return new OfferDeleted__Params(this);
  }
}

export class OfferDeleted__Params {
  _event: OfferDeleted;

  constructor(event: OfferDeleted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RubiconMarket___rankResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class RubiconMarket__getOfferResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class RubiconMarket__offersResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class RubiconMarket extends ethereum.SmartContract {
  static bind(address: Address): RubiconMarket {
    return new RubiconMarket("RubiconMarket", address);
  }

  AqueductAddress(): Address {
    let result = super.call(
      "AqueductAddress",
      "AqueductAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_AqueductAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "AqueductAddress",
      "AqueductAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  AqueductDistributionLive(): boolean {
    let result = super.call(
      "AqueductDistributionLive",
      "AqueductDistributionLive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_AqueductDistributionLive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "AqueductDistributionLive",
      "AqueductDistributionLive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _best(param0: Address, param1: Address): BigInt {
    let result = super.call("_best", "_best(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try__best(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_best", "_best(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _dust(param0: Address): BigInt {
    let result = super.call("_dust", "_dust(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try__dust(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_dust", "_dust(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _head(): BigInt {
    let result = super.call("_head", "_head():(uint256)", []);

    return result[0].toBigInt();
  }

  try__head(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_head", "_head():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _near(param0: BigInt): BigInt {
    let result = super.call("_near", "_near(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try__near(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_near", "_near(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _rank(param0: BigInt): RubiconMarket___rankResult {
    let result = super.call(
      "_rank",
      "_rank(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RubiconMarket___rankResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try__rank(param0: BigInt): ethereum.CallResult<RubiconMarket___rankResult> {
    let result = super.tryCall(
      "_rank",
      "_rank(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RubiconMarket___rankResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  _span(param0: Address, param1: Address): BigInt {
    let result = super.call("_span", "_span(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try__span(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_span", "_span(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buy(id: BigInt, amount: BigInt): boolean {
    let result = super.call("buy", "buy(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_buy(id: BigInt, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("buy", "buy(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  buyAllAmount(
    buy_gem: Address,
    buy_amt: BigInt,
    pay_gem: Address,
    max_fill_amount: BigInt
  ): BigInt {
    let result = super.call(
      "buyAllAmount",
      "buyAllAmount(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(max_fill_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyAllAmount(
    buy_gem: Address,
    buy_amt: BigInt,
    pay_gem: Address,
    max_fill_amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyAllAmount",
      "buyAllAmount(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(max_fill_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyEnabled(): boolean {
    let result = super.call("buyEnabled", "buyEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_buyEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("buyEnabled", "buyEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cancel(id: BigInt): boolean {
    let result = super.call("cancel", "cancel(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_cancel(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("cancel", "cancel(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  del_rank(id: BigInt): boolean {
    let result = super.call("del_rank", "del_rank(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_del_rank(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("del_rank", "del_rank(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dustId(): BigInt {
    let result = super.call("dustId", "dustId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dustId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dustId", "dustId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBestOffer(sell_gem: Address, buy_gem: Address): BigInt {
    let result = super.call(
      "getBestOffer",
      "getBestOffer(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sell_gem),
        ethereum.Value.fromAddress(buy_gem)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBestOffer(
    sell_gem: Address,
    buy_gem: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBestOffer",
      "getBestOffer(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sell_gem),
        ethereum.Value.fromAddress(buy_gem)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBetterOffer(id: BigInt): BigInt {
    let result = super.call(
      "getBetterOffer",
      "getBetterOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getBetterOffer(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBetterOffer",
      "getBetterOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyAmount(buy_gem: Address, pay_gem: Address, pay_amt: BigInt): BigInt {
    let result = super.call(
      "getBuyAmount",
      "getBuyAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(pay_amt)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyAmount(
    buy_gem: Address,
    pay_gem: Address,
    pay_amt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyAmount",
      "getBuyAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(pay_amt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFirstUnsortedOffer(): BigInt {
    let result = super.call(
      "getFirstUnsortedOffer",
      "getFirstUnsortedOffer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFirstUnsortedOffer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFirstUnsortedOffer",
      "getFirstUnsortedOffer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinSell(pay_gem: Address): BigInt {
    let result = super.call("getMinSell", "getMinSell(address):(uint256)", [
      ethereum.Value.fromAddress(pay_gem)
    ]);

    return result[0].toBigInt();
  }

  try_getMinSell(pay_gem: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMinSell", "getMinSell(address):(uint256)", [
      ethereum.Value.fromAddress(pay_gem)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextUnsortedOffer(id: BigInt): BigInt {
    let result = super.call(
      "getNextUnsortedOffer",
      "getNextUnsortedOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getNextUnsortedOffer(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextUnsortedOffer",
      "getNextUnsortedOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOffer(id: BigInt): RubiconMarket__getOfferResult {
    let result = super.call(
      "getOffer",
      "getOffer(uint256):(uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new RubiconMarket__getOfferResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_getOffer(id: BigInt): ethereum.CallResult<RubiconMarket__getOfferResult> {
    let result = super.tryCall(
      "getOffer",
      "getOffer(uint256):(uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RubiconMarket__getOfferResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  getOfferCount(sell_gem: Address, buy_gem: Address): BigInt {
    let result = super.call(
      "getOfferCount",
      "getOfferCount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sell_gem),
        ethereum.Value.fromAddress(buy_gem)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOfferCount(
    sell_gem: Address,
    buy_gem: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOfferCount",
      "getOfferCount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sell_gem),
        ethereum.Value.fromAddress(buy_gem)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwner(id: BigInt): Address {
    let result = super.call("getOwner", "getOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_getOwner(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPayAmount(pay_gem: Address, buy_gem: Address, buy_amt: BigInt): BigInt {
    let result = super.call(
      "getPayAmount",
      "getPayAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPayAmount(
    pay_gem: Address,
    buy_gem: Address,
    buy_amt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPayAmount",
      "getPayAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTime(): BigInt {
    let result = super.call("getTime", "getTime():(uint64)", []);

    return result[0].toBigInt();
  }

  try_getTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTime", "getTime():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWorseOffer(id: BigInt): BigInt {
    let result = super.call(
      "getWorseOffer",
      "getWorseOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getWorseOffer(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWorseOffer",
      "getWorseOffer(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  insert(id: BigInt, pos: BigInt): boolean {
    let result = super.call("insert", "insert(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(pos)
    ]);

    return result[0].toBoolean();
  }

  try_insert(id: BigInt, pos: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("insert", "insert(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
      ethereum.Value.fromUnsignedBigInt(pos)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isActive(id: BigInt): boolean {
    let result = super.call("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_isActive(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClosed(): boolean {
    let result = super.call("isClosed", "isClosed():(bool)", []);

    return result[0].toBoolean();
  }

  try_isClosed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClosed", "isClosed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOfferSorted(id: BigInt): boolean {
    let result = super.call("isOfferSorted", "isOfferSorted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_isOfferSorted(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isOfferSorted",
      "isOfferSorted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  last_offer_id(): BigInt {
    let result = super.call("last_offer_id", "last_offer_id():(uint256)", []);

    return result[0].toBigInt();
  }

  try_last_offer_id(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "last_offer_id",
      "last_offer_id():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  make(
    pay_gem: Address,
    buy_gem: Address,
    pay_amt: BigInt,
    buy_amt: BigInt
  ): Bytes {
    let result = super.call(
      "make",
      "make(address,address,uint128,uint128):(bytes32)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromUnsignedBigInt(buy_amt)
      ]
    );

    return result[0].toBytes();
  }

  try_make(
    pay_gem: Address,
    buy_gem: Address,
    pay_amt: BigInt,
    buy_amt: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "make",
      "make(address,address,uint128,uint128):(bytes32)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromUnsignedBigInt(buy_amt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  matchingEnabled(): boolean {
    let result = super.call("matchingEnabled", "matchingEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_matchingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "matchingEnabled",
      "matchingEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  offer(
    pay_amt: BigInt,
    pay_gem: Address,
    buy_amt: BigInt,
    buy_gem: Address,
    pos: BigInt
  ): BigInt {
    let result = super.call(
      "offer",
      "offer(uint256,address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );

    return result[0].toBigInt();
  }

  try_offer(
    pay_amt: BigInt,
    pay_gem: Address,
    buy_amt: BigInt,
    buy_gem: Address,
    pos: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offer",
      "offer(uint256,address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(pos)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offer1(
    pay_amt: BigInt,
    pay_gem: Address,
    buy_amt: BigInt,
    buy_gem: Address,
    pos: BigInt,
    matching: boolean
  ): BigInt {
    let result = super.call(
      "offer",
      "offer(uint256,address,uint256,address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(pos),
        ethereum.Value.fromBoolean(matching)
      ]
    );

    return result[0].toBigInt();
  }

  try_offer1(
    pay_amt: BigInt,
    pay_gem: Address,
    buy_amt: BigInt,
    buy_gem: Address,
    pos: BigInt,
    matching: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offer",
      "offer(uint256,address,uint256,address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(pos),
        ethereum.Value.fromBoolean(matching)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offer2(
    pay_amt: BigInt,
    pay_gem: Address,
    buy_amt: BigInt,
    buy_gem: Address
  ): BigInt {
    let result = super.call(
      "offer",
      "offer(uint256,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(buy_gem)
      ]
    );

    return result[0].toBigInt();
  }

  try_offer2(
    pay_amt: BigInt,
    pay_gem: Address,
    buy_amt: BigInt,
    buy_gem: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offer",
      "offer(uint256,address,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(buy_amt),
        ethereum.Value.fromAddress(buy_gem)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offers(param0: BigInt): RubiconMarket__offersResult {
    let result = super.call(
      "offers",
      "offers(uint256):(uint256,address,uint256,address,address,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new RubiconMarket__offersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt()
    );
  }

  try_offers(param0: BigInt): ethereum.CallResult<RubiconMarket__offersResult> {
    let result = super.tryCall(
      "offers",
      "offers(uint256):(uint256,address,uint256,address,address,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RubiconMarket__offersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellAllAmount(
    pay_gem: Address,
    pay_amt: BigInt,
    buy_gem: Address,
    min_fill_amount: BigInt
  ): BigInt {
    let result = super.call(
      "sellAllAmount",
      "sellAllAmount(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(min_fill_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellAllAmount(
    pay_gem: Address,
    pay_amt: BigInt,
    buy_gem: Address,
    min_fill_amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellAllAmount",
      "sellAllAmount(address,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(pay_amt),
        ethereum.Value.fromAddress(buy_gem),
        ethereum.Value.fromUnsignedBigInt(min_fill_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setAqueductAddress(_Aqueduct: Address): boolean {
    let result = super.call(
      "setAqueductAddress",
      "setAqueductAddress(address):(bool)",
      [ethereum.Value.fromAddress(_Aqueduct)]
    );

    return result[0].toBoolean();
  }

  try_setAqueductAddress(_Aqueduct: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setAqueductAddress",
      "setAqueductAddress(address):(bool)",
      [ethereum.Value.fromAddress(_Aqueduct)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setAqueductDistributionLive(live: boolean): boolean {
    let result = super.call(
      "setAqueductDistributionLive",
      "setAqueductDistributionLive(bool):(bool)",
      [ethereum.Value.fromBoolean(live)]
    );

    return result[0].toBoolean();
  }

  try_setAqueductDistributionLive(live: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setAqueductDistributionLive",
      "setAqueductDistributionLive(bool):(bool)",
      [ethereum.Value.fromBoolean(live)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setBuyEnabled(buyEnabled_: boolean): boolean {
    let result = super.call("setBuyEnabled", "setBuyEnabled(bool):(bool)", [
      ethereum.Value.fromBoolean(buyEnabled_)
    ]);

    return result[0].toBoolean();
  }

  try_setBuyEnabled(buyEnabled_: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall("setBuyEnabled", "setBuyEnabled(bool):(bool)", [
      ethereum.Value.fromBoolean(buyEnabled_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFeeBPS(_newFeeBPS: BigInt): boolean {
    let result = super.call("setFeeBPS", "setFeeBPS(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_newFeeBPS)
    ]);

    return result[0].toBoolean();
  }

  try_setFeeBPS(_newFeeBPS: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("setFeeBPS", "setFeeBPS(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_newFeeBPS)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFeeTo(newFeeTo: Address): boolean {
    let result = super.call("setFeeTo", "setFeeTo(address):(bool)", [
      ethereum.Value.fromAddress(newFeeTo)
    ]);

    return result[0].toBoolean();
  }

  try_setFeeTo(newFeeTo: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("setFeeTo", "setFeeTo(address):(bool)", [
      ethereum.Value.fromAddress(newFeeTo)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMatchingEnabled(matchingEnabled_: boolean): boolean {
    let result = super.call(
      "setMatchingEnabled",
      "setMatchingEnabled(bool):(bool)",
      [ethereum.Value.fromBoolean(matchingEnabled_)]
    );

    return result[0].toBoolean();
  }

  try_setMatchingEnabled(
    matchingEnabled_: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMatchingEnabled",
      "setMatchingEnabled(bool):(bool)",
      [ethereum.Value.fromBoolean(matchingEnabled_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMinSell(pay_gem: Address, dust: BigInt): boolean {
    let result = super.call(
      "setMinSell",
      "setMinSell(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(dust)
      ]
    );

    return result[0].toBoolean();
  }

  try_setMinSell(pay_gem: Address, dust: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setMinSell",
      "setMinSell(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(pay_gem),
        ethereum.Value.fromUnsignedBigInt(dust)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stopped(): boolean {
    let result = super.call("stopped", "stopped():(bool)", []);

    return result[0].toBoolean();
  }

  try_stopped(): ethereum.CallResult<boolean> {
    let result = super.tryCall("stopped", "stopped():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BumpCall extends ethereum.Call {
  get inputs(): BumpCall__Inputs {
    return new BumpCall__Inputs(this);
  }

  get outputs(): BumpCall__Outputs {
    return new BumpCall__Outputs(this);
  }
}

export class BumpCall__Inputs {
  _call: BumpCall;

  constructor(call: BumpCall) {
    this._call = call;
  }

  get id_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class BumpCall__Outputs {
  _call: BumpCall;

  constructor(call: BumpCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BuyAllAmountCall extends ethereum.Call {
  get inputs(): BuyAllAmountCall__Inputs {
    return new BuyAllAmountCall__Inputs(this);
  }

  get outputs(): BuyAllAmountCall__Outputs {
    return new BuyAllAmountCall__Outputs(this);
  }
}

export class BuyAllAmountCall__Inputs {
  _call: BuyAllAmountCall;

  constructor(call: BuyAllAmountCall) {
    this._call = call;
  }

  get buy_gem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get buy_amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pay_gem(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get max_fill_amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyAllAmountCall__Outputs {
  _call: BuyAllAmountCall;

  constructor(call: BuyAllAmountCall) {
    this._call = call;
  }

  get fill_amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class Del_rankCall extends ethereum.Call {
  get inputs(): Del_rankCall__Inputs {
    return new Del_rankCall__Inputs(this);
  }

  get outputs(): Del_rankCall__Outputs {
    return new Del_rankCall__Outputs(this);
  }
}

export class Del_rankCall__Inputs {
  _call: Del_rankCall;

  constructor(call: Del_rankCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Del_rankCall__Outputs {
  _call: Del_rankCall;

  constructor(call: Del_rankCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _live(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _feeTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InsertCall extends ethereum.Call {
  get inputs(): InsertCall__Inputs {
    return new InsertCall__Inputs(this);
  }

  get outputs(): InsertCall__Outputs {
    return new InsertCall__Outputs(this);
  }
}

export class InsertCall__Inputs {
  _call: InsertCall;

  constructor(call: InsertCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pos(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InsertCall__Outputs {
  _call: InsertCall;

  constructor(call: InsertCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class KillCall extends ethereum.Call {
  get inputs(): KillCall__Inputs {
    return new KillCall__Inputs(this);
  }

  get outputs(): KillCall__Outputs {
    return new KillCall__Outputs(this);
  }
}

export class KillCall__Inputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class KillCall__Outputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class MakeCall extends ethereum.Call {
  get inputs(): MakeCall__Inputs {
    return new MakeCall__Inputs(this);
  }

  get outputs(): MakeCall__Outputs {
    return new MakeCall__Outputs(this);
  }
}

export class MakeCall__Inputs {
  _call: MakeCall;

  constructor(call: MakeCall) {
    this._call = call;
  }

  get pay_gem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get buy_gem(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get pay_amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get buy_amt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MakeCall__Outputs {
  _call: MakeCall;

  constructor(call: MakeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OfferCall extends ethereum.Call {
  get inputs(): OfferCall__Inputs {
    return new OfferCall__Inputs(this);
  }

  get outputs(): OfferCall__Outputs {
    return new OfferCall__Outputs(this);
  }
}

export class OfferCall__Inputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }

  get pay_amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pay_gem(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get buy_amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get buy_gem(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get pos(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OfferCall__Outputs {
  _call: OfferCall;

  constructor(call: OfferCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Offer1Call extends ethereum.Call {
  get inputs(): Offer1Call__Inputs {
    return new Offer1Call__Inputs(this);
  }

  get outputs(): Offer1Call__Outputs {
    return new Offer1Call__Outputs(this);
  }
}

export class Offer1Call__Inputs {
  _call: Offer1Call;

  constructor(call: Offer1Call) {
    this._call = call;
  }

  get pay_amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pay_gem(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get buy_amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get buy_gem(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get pos(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get matching(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class Offer1Call__Outputs {
  _call: Offer1Call;

  constructor(call: Offer1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class Offer2Call extends ethereum.Call {
  get inputs(): Offer2Call__Inputs {
    return new Offer2Call__Inputs(this);
  }

  get outputs(): Offer2Call__Outputs {
    return new Offer2Call__Outputs(this);
  }
}

export class Offer2Call__Inputs {
  _call: Offer2Call;

  constructor(call: Offer2Call) {
    this._call = call;
  }

  get pay_amt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pay_gem(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get buy_amt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get buy_gem(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class Offer2Call__Outputs {
  _call: Offer2Call;

  constructor(call: Offer2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellAllAmountCall extends ethereum.Call {
  get inputs(): SellAllAmountCall__Inputs {
    return new SellAllAmountCall__Inputs(this);
  }

  get outputs(): SellAllAmountCall__Outputs {
    return new SellAllAmountCall__Outputs(this);
  }
}

export class SellAllAmountCall__Inputs {
  _call: SellAllAmountCall;

  constructor(call: SellAllAmountCall) {
    this._call = call;
  }

  get pay_gem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pay_amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buy_gem(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get min_fill_amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SellAllAmountCall__Outputs {
  _call: SellAllAmountCall;

  constructor(call: SellAllAmountCall) {
    this._call = call;
  }

  get fill_amt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetAqueductAddressCall extends ethereum.Call {
  get inputs(): SetAqueductAddressCall__Inputs {
    return new SetAqueductAddressCall__Inputs(this);
  }

  get outputs(): SetAqueductAddressCall__Outputs {
    return new SetAqueductAddressCall__Outputs(this);
  }
}

export class SetAqueductAddressCall__Inputs {
  _call: SetAqueductAddressCall;

  constructor(call: SetAqueductAddressCall) {
    this._call = call;
  }

  get _Aqueduct(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAqueductAddressCall__Outputs {
  _call: SetAqueductAddressCall;

  constructor(call: SetAqueductAddressCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetAqueductDistributionLiveCall extends ethereum.Call {
  get inputs(): SetAqueductDistributionLiveCall__Inputs {
    return new SetAqueductDistributionLiveCall__Inputs(this);
  }

  get outputs(): SetAqueductDistributionLiveCall__Outputs {
    return new SetAqueductDistributionLiveCall__Outputs(this);
  }
}

export class SetAqueductDistributionLiveCall__Inputs {
  _call: SetAqueductDistributionLiveCall;

  constructor(call: SetAqueductDistributionLiveCall) {
    this._call = call;
  }

  get live(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAqueductDistributionLiveCall__Outputs {
  _call: SetAqueductDistributionLiveCall;

  constructor(call: SetAqueductDistributionLiveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetBuyEnabledCall extends ethereum.Call {
  get inputs(): SetBuyEnabledCall__Inputs {
    return new SetBuyEnabledCall__Inputs(this);
  }

  get outputs(): SetBuyEnabledCall__Outputs {
    return new SetBuyEnabledCall__Outputs(this);
  }
}

export class SetBuyEnabledCall__Inputs {
  _call: SetBuyEnabledCall;

  constructor(call: SetBuyEnabledCall) {
    this._call = call;
  }

  get buyEnabled_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetBuyEnabledCall__Outputs {
  _call: SetBuyEnabledCall;

  constructor(call: SetBuyEnabledCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFeeBPSCall extends ethereum.Call {
  get inputs(): SetFeeBPSCall__Inputs {
    return new SetFeeBPSCall__Inputs(this);
  }

  get outputs(): SetFeeBPSCall__Outputs {
    return new SetFeeBPSCall__Outputs(this);
  }
}

export class SetFeeBPSCall__Inputs {
  _call: SetFeeBPSCall;

  constructor(call: SetFeeBPSCall) {
    this._call = call;
  }

  get _newFeeBPS(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeBPSCall__Outputs {
  _call: SetFeeBPSCall;

  constructor(call: SetFeeBPSCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFeeToCall extends ethereum.Call {
  get inputs(): SetFeeToCall__Inputs {
    return new SetFeeToCall__Inputs(this);
  }

  get outputs(): SetFeeToCall__Outputs {
    return new SetFeeToCall__Outputs(this);
  }
}

export class SetFeeToCall__Inputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }

  get newFeeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeToCall__Outputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMatchingEnabledCall extends ethereum.Call {
  get inputs(): SetMatchingEnabledCall__Inputs {
    return new SetMatchingEnabledCall__Inputs(this);
  }

  get outputs(): SetMatchingEnabledCall__Outputs {
    return new SetMatchingEnabledCall__Outputs(this);
  }
}

export class SetMatchingEnabledCall__Inputs {
  _call: SetMatchingEnabledCall;

  constructor(call: SetMatchingEnabledCall) {
    this._call = call;
  }

  get matchingEnabled_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetMatchingEnabledCall__Outputs {
  _call: SetMatchingEnabledCall;

  constructor(call: SetMatchingEnabledCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMinSellCall extends ethereum.Call {
  get inputs(): SetMinSellCall__Inputs {
    return new SetMinSellCall__Inputs(this);
  }

  get outputs(): SetMinSellCall__Outputs {
    return new SetMinSellCall__Outputs(this);
  }
}

export class SetMinSellCall__Inputs {
  _call: SetMinSellCall;

  constructor(call: SetMinSellCall) {
    this._call = call;
  }

  get pay_gem(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dust(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinSellCall__Outputs {
  _call: SetMinSellCall;

  constructor(call: SetMinSellCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class StopCall extends ethereum.Call {
  get inputs(): StopCall__Inputs {
    return new StopCall__Inputs(this);
  }

  get outputs(): StopCall__Outputs {
    return new StopCall__Outputs(this);
  }
}

export class StopCall__Inputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class StopCall__Outputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class TakeCall extends ethereum.Call {
  get inputs(): TakeCall__Inputs {
    return new TakeCall__Inputs(this);
  }

  get outputs(): TakeCall__Outputs {
    return new TakeCall__Outputs(this);
  }
}

export class TakeCall__Inputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get maxTakeAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TakeCall__Outputs {
  _call: TakeCall;

  constructor(call: TakeCall) {
    this._call = call;
  }
}
