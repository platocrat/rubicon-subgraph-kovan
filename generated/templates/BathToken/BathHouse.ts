// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BathHouse extends ethereum.SmartContract {
  static bind(address: Address): BathHouse {
    return new BathHouse("BathHouse", address);
  }

  RubiconMarketAddress(): Address {
    let result = super.call(
      "RubiconMarketAddress",
      "RubiconMarketAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_RubiconMarketAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "RubiconMarketAddress",
      "RubiconMarketAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  approvedBathTokens(param0: Address): boolean {
    let result = super.call(
      "approvedBathTokens",
      "approvedBathTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_approvedBathTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedBathTokens",
      "approvedBathTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approvedPairs(param0: Address): boolean {
    let result = super.call("approvedPairs", "approvedPairs(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_approvedPairs(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedPairs",
      "approvedPairs(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approvedStrategists(param0: Address): boolean {
    let result = super.call(
      "approvedStrategists",
      "approvedStrategists(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_approvedStrategists(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedStrategists",
      "approvedStrategists(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  doesAssetExist(asset: Address): boolean {
    let result = super.call(
      "doesAssetExist",
      "doesAssetExist(address):(bool)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toBoolean();
  }

  try_doesAssetExist(asset: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesAssetExist",
      "doesAssetExist(address):(bool)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  doesQuoteExist(quote: Address): boolean {
    let result = super.call(
      "doesQuoteExist",
      "doesQuoteExist(address):(bool)",
      [ethereum.Value.fromAddress(quote)]
    );

    return result[0].toBoolean();
  }

  try_doesQuoteExist(quote: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesQuoteExist",
      "doesQuoteExist(address):(bool)",
      [ethereum.Value.fromAddress(quote)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBPSToStrats(pair: Address): i32 {
    let result = super.call(
      "getBPSToStrats",
      "getBPSToStrats(address):(uint8)",
      [ethereum.Value.fromAddress(pair)]
    );

    return result[0].toI32();
  }

  try_getBPSToStrats(pair: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getBPSToStrats",
      "getBPSToStrats(address):(uint8)",
      [ethereum.Value.fromAddress(pair)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBathPair(asset: Address, quote: Address): Address {
    let result = super.call(
      "getBathPair",
      "getBathPair(address,address):(address)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(quote)]
    );

    return result[0].toAddress();
  }

  try_getBathPair(
    asset: Address,
    quote: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBathPair",
      "getBathPair(address,address):(address)",
      [ethereum.Value.fromAddress(asset), ethereum.Value.fromAddress(quote)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBathTokenfromAsset(asset: Address): Address {
    let result = super.call(
      "getBathTokenfromAsset",
      "getBathTokenfromAsset(address):(address)",
      [ethereum.Value.fromAddress(asset)]
    );

    return result[0].toAddress();
  }

  try_getBathTokenfromAsset(asset: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBathTokenfromAsset",
      "getBathTokenfromAsset(address):(address)",
      [ethereum.Value.fromAddress(asset)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBathTokenfromQuote(quote: Address): Address {
    let result = super.call(
      "getBathTokenfromQuote",
      "getBathTokenfromQuote(address):(address)",
      [ethereum.Value.fromAddress(quote)]
    );

    return result[0].toAddress();
  }

  try_getBathTokenfromQuote(quote: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBathTokenfromQuote",
      "getBathTokenfromQuote(address):(address)",
      [ethereum.Value.fromAddress(quote)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCancelTimeDelay(): BigInt {
    let result = super.call(
      "getCancelTimeDelay",
      "getCancelTimeDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCancelTimeDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCancelTimeDelay",
      "getCancelTimeDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarket(): Address {
    let result = super.call("getMarket", "getMarket():(address)", []);

    return result[0].toAddress();
  }

  try_getMarket(): ethereum.CallResult<Address> {
    let result = super.tryCall("getMarket", "getMarket():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPair(param0: Address, param1: Address): Address {
    let result = super.call("getPair", "getPair(address,address):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toAddress();
  }

  try_getPair(param0: Address, param1: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPair",
      "getPair(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserveRatio(): BigInt {
    let result = super.call(
      "getReserveRatio",
      "getReserveRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getReserveRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveRatio",
      "getReserveRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initBathPair(
    asset: Address,
    quote: Address,
    pair: Address,
    _propToStrategists: i32
  ): Address {
    let result = super.call(
      "initBathPair",
      "initBathPair(address,address,address,uint8):(address)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(quote),
        ethereum.Value.fromAddress(pair),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_propToStrategists))
      ]
    );

    return result[0].toAddress();
  }

  try_initBathPair(
    asset: Address,
    quote: Address,
    pair: Address,
    _propToStrategists: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "initBathPair",
      "initBathPair(address,address,address,uint8):(address)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(quote),
        ethereum.Value.fromAddress(pair),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_propToStrategists))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedPair(pair: Address): boolean {
    let result = super.call(
      "isApprovedPair",
      "isApprovedPair(address):(bool)",
      [ethereum.Value.fromAddress(pair)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedPair(pair: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedPair",
      "isApprovedPair(address):(bool)",
      [ethereum.Value.fromAddress(pair)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedStrategist(wouldBeStrategist: Address): boolean {
    let result = super.call(
      "isApprovedStrategist",
      "isApprovedStrategist(address):(bool)",
      [ethereum.Value.fromAddress(wouldBeStrategist)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedStrategist(
    wouldBeStrategist: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedStrategist",
      "isApprovedStrategist(address):(bool)",
      [ethereum.Value.fromAddress(wouldBeStrategist)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxOutstandingPairCount(): BigInt {
    let result = super.call(
      "maxOutstandingPairCount",
      "maxOutstandingPairCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxOutstandingPairCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxOutstandingPairCount",
      "maxOutstandingPairCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  permissionedStrategists(): boolean {
    let result = super.call(
      "permissionedStrategists",
      "permissionedStrategists():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_permissionedStrategists(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "permissionedStrategists",
      "permissionedStrategists():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  propToStrategists(param0: Address): i32 {
    let result = super.call(
      "propToStrategists",
      "propToStrategists(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toI32();
  }

  try_propToStrategists(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "propToStrategists",
      "propToStrategists(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  reserveRatio(): BigInt {
    let result = super.call("reserveRatio", "reserveRatio():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reserveRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserveRatio", "reserveRatio():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeDelay(): BigInt {
    let result = super.call("timeDelay", "timeDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timeDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timeDelay", "timeDelay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveStrategistCall extends ethereum.Call {
  get inputs(): ApproveStrategistCall__Inputs {
    return new ApproveStrategistCall__Inputs(this);
  }

  get outputs(): ApproveStrategistCall__Outputs {
    return new ApproveStrategistCall__Outputs(this);
  }
}

export class ApproveStrategistCall__Inputs {
  _call: ApproveStrategistCall;

  constructor(call: ApproveStrategistCall) {
    this._call = call;
  }

  get strategist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveStrategistCall__Outputs {
  _call: ApproveStrategistCall;

  constructor(call: ApproveStrategistCall) {
    this._call = call;
  }
}

export class InitBathPairCall extends ethereum.Call {
  get inputs(): InitBathPairCall__Inputs {
    return new InitBathPairCall__Inputs(this);
  }

  get outputs(): InitBathPairCall__Outputs {
    return new InitBathPairCall__Outputs(this);
  }
}

export class InitBathPairCall__Inputs {
  _call: InitBathPairCall;

  constructor(call: InitBathPairCall) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quote(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get pair(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _propToStrategists(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class InitBathPairCall__Outputs {
  _call: InitBathPairCall;

  constructor(call: InitBathPairCall) {
    this._call = call;
  }

  get newPair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get market(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reserveRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _timeDelay(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mopc(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemovePairCall extends ethereum.Call {
  get inputs(): RemovePairCall__Inputs {
    return new RemovePairCall__Inputs(this);
  }

  get outputs(): RemovePairCall__Outputs {
    return new RemovePairCall__Outputs(this);
  }
}

export class RemovePairCall__Inputs {
  _call: RemovePairCall;

  constructor(call: RemovePairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePairCall__Outputs {
  _call: RemovePairCall;

  constructor(call: RemovePairCall) {
    this._call = call;
  }
}

export class SetBathHouseAdminCall extends ethereum.Call {
  get inputs(): SetBathHouseAdminCall__Inputs {
    return new SetBathHouseAdminCall__Inputs(this);
  }

  get outputs(): SetBathHouseAdminCall__Outputs {
    return new SetBathHouseAdminCall__Outputs(this);
  }
}

export class SetBathHouseAdminCall__Inputs {
  _call: SetBathHouseAdminCall;

  constructor(call: SetBathHouseAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBathHouseAdminCall__Outputs {
  _call: SetBathHouseAdminCall;

  constructor(call: SetBathHouseAdminCall) {
    this._call = call;
  }
}

export class SetBathPairMOSBPSCall extends ethereum.Call {
  get inputs(): SetBathPairMOSBPSCall__Inputs {
    return new SetBathPairMOSBPSCall__Inputs(this);
  }

  get outputs(): SetBathPairMOSBPSCall__Outputs {
    return new SetBathPairMOSBPSCall__Outputs(this);
  }
}

export class SetBathPairMOSBPSCall__Inputs {
  _call: SetBathPairMOSBPSCall;

  constructor(call: SetBathPairMOSBPSCall) {
    this._call = call;
  }

  get bathPair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mosbps(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetBathPairMOSBPSCall__Outputs {
  _call: SetBathPairMOSBPSCall;

  constructor(call: SetBathPairMOSBPSCall) {
    this._call = call;
  }
}

export class SetBathPairSCNCall extends ethereum.Call {
  get inputs(): SetBathPairSCNCall__Inputs {
    return new SetBathPairSCNCall__Inputs(this);
  }

  get outputs(): SetBathPairSCNCall__Outputs {
    return new SetBathPairSCNCall__Outputs(this);
  }
}

export class SetBathPairSCNCall__Inputs {
  _call: SetBathPairSCNCall;

  constructor(call: SetBathPairSCNCall) {
    this._call = call;
  }

  get bathPair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get val(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBathPairSCNCall__Outputs {
  _call: SetBathPairSCNCall;

  constructor(call: SetBathPairSCNCall) {
    this._call = call;
  }
}

export class SetBathPairSearchRadiusCall extends ethereum.Call {
  get inputs(): SetBathPairSearchRadiusCall__Inputs {
    return new SetBathPairSearchRadiusCall__Inputs(this);
  }

  get outputs(): SetBathPairSearchRadiusCall__Outputs {
    return new SetBathPairSearchRadiusCall__Outputs(this);
  }
}

export class SetBathPairSearchRadiusCall__Inputs {
  _call: SetBathPairSearchRadiusCall;

  constructor(call: SetBathPairSearchRadiusCall) {
    this._call = call;
  }

  get bathPair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sr(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBathPairSearchRadiusCall__Outputs {
  _call: SetBathPairSearchRadiusCall;

  constructor(call: SetBathPairSearchRadiusCall) {
    this._call = call;
  }
}

export class SetBathTokenBathHouseCall extends ethereum.Call {
  get inputs(): SetBathTokenBathHouseCall__Inputs {
    return new SetBathTokenBathHouseCall__Inputs(this);
  }

  get outputs(): SetBathTokenBathHouseCall__Outputs {
    return new SetBathTokenBathHouseCall__Outputs(this);
  }
}

export class SetBathTokenBathHouseCall__Inputs {
  _call: SetBathTokenBathHouseCall;

  constructor(call: SetBathTokenBathHouseCall) {
    this._call = call;
  }

  get bathToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetBathTokenBathHouseCall__Outputs {
  _call: SetBathTokenBathHouseCall;

  constructor(call: SetBathTokenBathHouseCall) {
    this._call = call;
  }
}

export class SetBathTokenFeeBPSCall extends ethereum.Call {
  get inputs(): SetBathTokenFeeBPSCall__Inputs {
    return new SetBathTokenFeeBPSCall__Inputs(this);
  }

  get outputs(): SetBathTokenFeeBPSCall__Outputs {
    return new SetBathTokenFeeBPSCall__Outputs(this);
  }
}

export class SetBathTokenFeeBPSCall__Inputs {
  _call: SetBathTokenFeeBPSCall;

  constructor(call: SetBathTokenFeeBPSCall) {
    this._call = call;
  }

  get bathToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newBPS(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetBathTokenFeeBPSCall__Outputs {
  _call: SetBathTokenFeeBPSCall;

  constructor(call: SetBathTokenFeeBPSCall) {
    this._call = call;
  }
}

export class SetBathTokenMarketCall extends ethereum.Call {
  get inputs(): SetBathTokenMarketCall__Inputs {
    return new SetBathTokenMarketCall__Inputs(this);
  }

  get outputs(): SetBathTokenMarketCall__Outputs {
    return new SetBathTokenMarketCall__Outputs(this);
  }
}

export class SetBathTokenMarketCall__Inputs {
  _call: SetBathTokenMarketCall;

  constructor(call: SetBathTokenMarketCall) {
    this._call = call;
  }

  get bathToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newMarket(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetBathTokenMarketCall__Outputs {
  _call: SetBathTokenMarketCall;

  constructor(call: SetBathTokenMarketCall) {
    this._call = call;
  }
}

export class SetCancelTimeDelayCall extends ethereum.Call {
  get inputs(): SetCancelTimeDelayCall__Inputs {
    return new SetCancelTimeDelayCall__Inputs(this);
  }

  get outputs(): SetCancelTimeDelayCall__Outputs {
    return new SetCancelTimeDelayCall__Outputs(this);
  }
}

export class SetCancelTimeDelayCall__Inputs {
  _call: SetCancelTimeDelayCall;

  constructor(call: SetCancelTimeDelayCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCancelTimeDelayCall__Outputs {
  _call: SetCancelTimeDelayCall;

  constructor(call: SetCancelTimeDelayCall) {
    this._call = call;
  }
}

export class SetFeeToCall extends ethereum.Call {
  get inputs(): SetFeeToCall__Inputs {
    return new SetFeeToCall__Inputs(this);
  }

  get outputs(): SetFeeToCall__Outputs {
    return new SetFeeToCall__Outputs(this);
  }
}

export class SetFeeToCall__Inputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }

  get bathToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetFeeToCall__Outputs {
  _call: SetFeeToCall;

  constructor(call: SetFeeToCall) {
    this._call = call;
  }
}

export class SetMarketCall extends ethereum.Call {
  get inputs(): SetMarketCall__Inputs {
    return new SetMarketCall__Inputs(this);
  }

  get outputs(): SetMarketCall__Outputs {
    return new SetMarketCall__Outputs(this);
  }
}

export class SetMarketCall__Inputs {
  _call: SetMarketCall;

  constructor(call: SetMarketCall) {
    this._call = call;
  }

  get newMarket(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketCall__Outputs {
  _call: SetMarketCall;

  constructor(call: SetMarketCall) {
    this._call = call;
  }
}

export class SetMaxOutstandingPairCountCall extends ethereum.Call {
  get inputs(): SetMaxOutstandingPairCountCall__Inputs {
    return new SetMaxOutstandingPairCountCall__Inputs(this);
  }

  get outputs(): SetMaxOutstandingPairCountCall__Outputs {
    return new SetMaxOutstandingPairCountCall__Outputs(this);
  }
}

export class SetMaxOutstandingPairCountCall__Inputs {
  _call: SetMaxOutstandingPairCountCall;

  constructor(call: SetMaxOutstandingPairCountCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxOutstandingPairCountCall__Outputs {
  _call: SetMaxOutstandingPairCountCall;

  constructor(call: SetMaxOutstandingPairCountCall) {
    this._call = call;
  }
}

export class SetPermissionedStrategistsCall extends ethereum.Call {
  get inputs(): SetPermissionedStrategistsCall__Inputs {
    return new SetPermissionedStrategistsCall__Inputs(this);
  }

  get outputs(): SetPermissionedStrategistsCall__Outputs {
    return new SetPermissionedStrategistsCall__Outputs(this);
  }
}

export class SetPermissionedStrategistsCall__Inputs {
  _call: SetPermissionedStrategistsCall;

  constructor(call: SetPermissionedStrategistsCall) {
    this._call = call;
  }

  get _new(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPermissionedStrategistsCall__Outputs {
  _call: SetPermissionedStrategistsCall;

  constructor(call: SetPermissionedStrategistsCall) {
    this._call = call;
  }
}

export class SetPropToStratsCall extends ethereum.Call {
  get inputs(): SetPropToStratsCall__Inputs {
    return new SetPropToStratsCall__Inputs(this);
  }

  get outputs(): SetPropToStratsCall__Outputs {
    return new SetPropToStratsCall__Outputs(this);
  }
}

export class SetPropToStratsCall__Inputs {
  _call: SetPropToStratsCall;

  constructor(call: SetPropToStratsCall) {
    this._call = call;
  }

  get value(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get pair(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetPropToStratsCall__Outputs {
  _call: SetPropToStratsCall;

  constructor(call: SetPropToStratsCall) {
    this._call = call;
  }
}

export class SetReserveRatioCall extends ethereum.Call {
  get inputs(): SetReserveRatioCall__Inputs {
    return new SetReserveRatioCall__Inputs(this);
  }

  get outputs(): SetReserveRatioCall__Outputs {
    return new SetReserveRatioCall__Outputs(this);
  }
}

export class SetReserveRatioCall__Inputs {
  _call: SetReserveRatioCall;

  constructor(call: SetReserveRatioCall) {
    this._call = call;
  }

  get rr(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReserveRatioCall__Outputs {
  _call: SetReserveRatioCall;

  constructor(call: SetReserveRatioCall) {
    this._call = call;
  }
}
