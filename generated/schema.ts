// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AdminChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AdminChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AdminChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AdminChanged", id.toString(), this);
  }

  static load(id: string): AdminChanged | null {
    return store.get("AdminChanged", id) as AdminChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousAdmin(): Bytes {
    let value = this.get("previousAdmin");
    return value.toBytes();
  }

  set previousAdmin(value: Bytes) {
    this.set("previousAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class Implementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Implementation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Implementation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Implementation", id.toString(), this);
  }

  static load(id: string): Implementation | null {
    return store.get("Implementation", id) as Implementation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentImplementation(): Bytes {
    let value = this.get("currentImplementation");
    return value.toBytes();
  }

  set currentImplementation(value: Bytes) {
    this.set("currentImplementation", Value.fromBytes(value));
  }
}

export class Upgraded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Upgraded entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Upgraded entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Upgraded", id.toString(), this);
  }

  static load(id: string): Upgraded | null {
    return store.get("Upgraded", id) as Upgraded | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }
}

export class UserTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserTrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserTrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserTrade", id.toString(), this);
  }

  static load(id: string): UserTrade | null {
    return store.get("UserTrade", id) as UserTrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isLimit(): boolean {
    let value = this.get("isLimit");
    return value.toBoolean();
  }

  set isLimit(value: boolean) {
    this.set("isLimit", Value.fromBoolean(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get payGem(): Bytes {
    let value = this.get("payGem");
    return value.toBytes();
  }

  set payGem(value: Bytes) {
    this.set("payGem", Value.fromBytes(value));
  }

  get buyGem(): Bytes {
    let value = this.get("buyGem");
    return value.toBytes();
  }

  set buyGem(value: Bytes) {
    this.set("buyGem", Value.fromBytes(value));
  }

  get payAmount(): BigInt {
    let value = this.get("payAmount");
    return value.toBigInt();
  }

  set payAmount(value: BigInt) {
    this.set("payAmount", Value.fromBigInt(value));
  }

  get buyAmount(): BigInt {
    let value = this.get("buyAmount");
    return value.toBigInt();
  }

  set buyAmount(value: BigInt) {
    this.set("buyAmount", Value.fromBigInt(value));
  }

  get completed(): boolean {
    let value = this.get("completed");
    return value.toBoolean();
  }

  set completed(value: boolean) {
    this.set("completed", Value.fromBoolean(value));
  }

  get killed(): boolean {
    let value = this.get("killed");
    return value.toBoolean();
  }

  set killed(value: boolean) {
    this.set("killed", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogMake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LogMake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogMake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogMake", id.toString(), this);
  }

  static load(id: string): LogMake | null {
    return store.get("LogMake", id) as LogMake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get pay_gem(): Bytes {
    let value = this.get("pay_gem");
    return value.toBytes();
  }

  set pay_gem(value: Bytes) {
    this.set("pay_gem", Value.fromBytes(value));
  }

  get buy_gem(): Bytes {
    let value = this.get("buy_gem");
    return value.toBytes();
  }

  set buy_gem(value: Bytes) {
    this.set("buy_gem", Value.fromBytes(value));
  }

  get pay_amt(): BigInt {
    let value = this.get("pay_amt");
    return value.toBigInt();
  }

  set pay_amt(value: BigInt) {
    this.set("pay_amt", Value.fromBigInt(value));
  }

  get buy_amt(): BigInt {
    let value = this.get("buy_amt");
    return value.toBigInt();
  }

  set buy_amt(value: BigInt) {
    this.set("buy_amt", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogTake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LogTake entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogTake entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogTake", id.toString(), this);
  }

  static load(id: string): LogTake | null {
    return store.get("LogTake", id) as LogTake | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get pay_gem(): Bytes {
    let value = this.get("pay_gem");
    return value.toBytes();
  }

  set pay_gem(value: Bytes) {
    this.set("pay_gem", Value.fromBytes(value));
  }

  get buy_gem(): Bytes {
    let value = this.get("buy_gem");
    return value.toBytes();
  }

  set buy_gem(value: Bytes) {
    this.set("buy_gem", Value.fromBytes(value));
  }

  get take_amt(): BigInt {
    let value = this.get("take_amt");
    return value.toBigInt();
  }

  set take_amt(value: BigInt) {
    this.set("take_amt", Value.fromBigInt(value));
  }

  get give_amt(): BigInt {
    let value = this.get("give_amt");
    return value.toBigInt();
  }

  set give_amt(value: BigInt) {
    this.set("give_amt", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogKill extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LogKill entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogKill entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogKill", id.toString(), this);
  }

  static load(id: string): LogKill | null {
    return store.get("LogKill", id) as LogKill | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    return value.toBytes();
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get pay_gem(): Bytes {
    let value = this.get("pay_gem");
    return value.toBytes();
  }

  set pay_gem(value: Bytes) {
    this.set("pay_gem", Value.fromBytes(value));
  }

  get buy_gem(): Bytes {
    let value = this.get("buy_gem");
    return value.toBytes();
  }

  set buy_gem(value: Bytes) {
    this.set("buy_gem", Value.fromBytes(value));
  }

  get pay_amt(): BigInt {
    let value = this.get("pay_amt");
    return value.toBigInt();
  }

  set pay_amt(value: BigInt) {
    this.set("pay_amt", Value.fromBigInt(value));
  }

  get buy_amt(): BigInt {
    let value = this.get("buy_amt");
    return value.toBigInt();
  }

  set buy_amt(value: BigInt) {
    this.set("buy_amt", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositedAmt(): BigInt {
    let value = this.get("depositedAmt");
    return value.toBigInt();
  }

  set depositedAmt(value: BigInt) {
    this.set("depositedAmt", Value.fromBigInt(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get sharesReceived(): BigInt {
    let value = this.get("sharesReceived");
    return value.toBigInt();
  }

  set sharesReceived(value: BigInt) {
    this.set("sharesReceived", Value.fromBigInt(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }
}

export class LogInit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LogInit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LogInit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LogInit", id.toString(), this);
  }

  static load(id: string): LogInit | null {
    return store.get("LogInit", id) as LogInit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timeOfInit(): BigInt {
    let value = this.get("timeOfInit");
    return value.toBigInt();
  }

  set timeOfInit(value: BigInt) {
    this.set("timeOfInit", Value.fromBigInt(value));
  }
}
